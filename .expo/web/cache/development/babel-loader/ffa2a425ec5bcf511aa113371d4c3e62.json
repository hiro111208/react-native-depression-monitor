{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/Index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Line, Svg } from \"react-native-svg\";\nimport ProgressBar from \"./ProgressBar\";\n\nvar Index = function (_Component) {\n  _inherits(Index, _Component);\n\n  var _super = _createSuper(Index);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      barMarkers: []\n    };\n\n    _this.setBarMarkers = function (barSeparation) {\n      for (var i = 0; i < 100; i + barSeparation) {\n        barMarkers.push(React.createElement(Line, {\n          x1: i,\n          y1: \"0\",\n          x2: i,\n          y2: \"100\",\n          stroke: \" red\",\n          strokeWidth: \"2\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 7\n        }\n      }, React.createElement(ProgressBar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        flex: 1,\n        flexDirection: \"coloumn\",\n        justifyContents: \"space-around\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      }, React.createElement(Svg, {\n        height: \"100\",\n        width: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }\n      }, this.state.barMarkers.map(function (x) {\n        return x;\n      }))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"black\"\n  }\n});","map":{"version":3,"sources":["/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/Index.js"],"names":["React","Component","Line","Svg","ProgressBar","Index","state","barMarkers","setBarMarkers","barSeparation","i","push","styles","container","map","x","StyleSheet","create","backgroundColor"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,IAAT,EAAeC,GAAf,QAA0B,kBAA1B;AAEA,OAAOC,WAAP;;IAEqBC,K;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;UAIRC,a,GAAgB,UAACC,aAAD,EAAmB;AACjC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,GAAGD,aAA7B,EAA4C;AAC1CF,QAAAA,UAAU,CAACI,IAAX,CACE,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAED,CAAV;AAAa,UAAA,EAAE,EAAC,GAAhB;AAAoB,UAAA,EAAE,EAAEA,CAAxB;AAA2B,UAAA,EAAE,EAAC,KAA9B;AAAoC,UAAA,MAAM,EAAC,MAA3C;AAAkD,UAAA,WAAW,EAAC,GAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;AACF,K;;;;;;;WAED,kBAAS;AAEP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,CAAZ;AAAe,QAAA,aAAa,EAAC,SAA7B;AAAuC,QAAA,eAAe,EAAC,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAC,KAAZ;AAAkB,QAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKP,KAAL,CAAWC,UAAX,CAAsBO,GAAtB,CAA0B,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1B,CADH,CADF,CAFF,CADF;AAUD;;;;EAzBgCd,S;;SAAdI,K;AA4BrB,IAAMO,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,eAAe,EAAE;AADR;AADoB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\nimport { Line, Svg } from \"react-native-svg\";\n\nimport ProgressBar from \"./ProgressBar\";\n\nexport default class Index extends Component {\n  state = {\n    barMarkers: [],\n  };\n  //WARNING! To be deprecated in React v17. Use componentDidMount instead.\n  setBarMarkers = (barSeparation) => {\n    for (let i = 0; i < 100; i + barSeparation) {\n      barMarkers.push(\n        <Line x1={i} y1=\"0\" x2={i} y2=\"100\" stroke=\" red\" strokeWidth=\"2\" />\n      );\n    }\n  };\n\n  render() {\n    // console.log(barMarkers);\n    return (\n      <View style={styles.container}>\n        <ProgressBar></ProgressBar>\n        <View flex={1} flexDirection=\"coloumn\" justifyContents=\"space-around\">\n          <Svg height=\"100\" width=\"100\">\n            {this.state.barMarkers.map((x) => x)}\n          </Svg>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"black\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}