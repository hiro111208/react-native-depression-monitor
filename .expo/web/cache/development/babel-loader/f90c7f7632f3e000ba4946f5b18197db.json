{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/ProgressBar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, useEffect, useRef, Animated } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport PropType from \"prop-types\";\nimport { Circle, Line, Svg } from \"react-native-svg\";\nimport BarMarkers from \"./BarMarkers\";\n\nvar ProgressBar = function (_Component) {\n  _inherits(ProgressBar, _Component);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar() {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      step: 50,\n      steps: 100,\n      animationValue: 0,\n      viewState: true\n    };\n\n    _this.handleIncrease = function () {\n      _this.setState({\n        step: _this.state.step + 10\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      var step = this.state.step;\n      console.log(step);\n      console.log(styles.progress);\n      return React.createElement(View, {\n        marginTop: 120,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, \"Progress...\"), React.createElement(View, {\n        style: styles.progressContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.progress,\n        width: step + \"%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      })), React.createElement(Button, {\n        title: \"Increment Progress\",\n        onPress: this.handleIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ProgressBar;\n}(Component);\n\nexport { ProgressBar as default };\nvar styles = StyleSheet.create({\n  progressContainer: {\n    marginVertical: 20,\n    borderWidth: 0.5,\n    height: 20,\n    borderRadius: 20,\n    overflow: \"hidden\",\n    width: \"100%\",\n    backgroundColor: \"grey\"\n  },\n  progress: {\n    backgroundColor: \"red\",\n    height: 20,\n    borderRadius: 20,\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    bottom: \"0\",\n    width: \"0\",\n    maxWidth: \"100%\"\n  }\n});","map":{"version":3,"sources":["/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/ProgressBar.js"],"names":["React","Component","useState","useEffect","useRef","Animated","PropType","Circle","Line","Svg","BarMarkers","ProgressBar","state","step","steps","animationValue","viewState","handleIncrease","setState","console","log","styles","progress","textAlign","progressContainer","StyleSheet","create","marginVertical","borderWidth","height","borderRadius","overflow","width","backgroundColor","position","left","top","bottom","maxWidth"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,QAAwE,OAAxE;;;;;;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,QAAkC,kBAAlC;AACA,OAAOC,UAAP;;IAEqBC,W;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,KAAK,EAAE,GAFD;AAGNC,MAAAA,cAAc,EAAE,CAHV;AAINC,MAAAA,SAAS,EAAE;AAJL,K;;UA4BRC,c,GAAiB,YAAM;AACrB,YAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IAAX,GAAkB;AAA1B,OAAd;AACD,K;;;;;;;WAED,kBAAS;AAAA,UAOCA,IAPD,GAOU,KAAKD,KAPf,CAOCC,IAPD;AAQPM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,QAAnB;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAE,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACC,QAApB;AAA8B,QAAA,KAAK,EAAKT,IAAL,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,EAKE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAC,oBADR;AAEE,QAAA,OAAO,EAAE,KAAKI,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AAYD;;;;EAvDsChB,S;;SAApBU,W;AA0DrB,IAAMU,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,iBAAiB,EAAE;AACjBG,IAAAA,cAAc,EAAE,EADC;AAEjBC,IAAAA,WAAW,EAAE,GAFI;AAGjBC,IAAAA,MAAM,EAAE,EAHS;AAIjBC,IAAAA,YAAY,EAAE,EAJG;AAKjBC,IAAAA,QAAQ,EAAE,QALO;AAMjBC,IAAAA,KAAK,EAAE,MANU;AAOjBC,IAAAA,eAAe,EAAE;AAPA,GADY;AAU/BX,EAAAA,QAAQ,EAAE;AACRW,IAAAA,eAAe,EAAE,KADT;AAERJ,IAAAA,MAAM,EAAE,EAFA;AAGRC,IAAAA,YAAY,EAAE,EAHN;AAIRI,IAAAA,QAAQ,EAAE,UAJF;AAKRC,IAAAA,IAAI,EAAE,GALE;AAMRC,IAAAA,GAAG,EAAE,GANG;AAORC,IAAAA,MAAM,EAAE,GAPA;AAQRL,IAAAA,KAAK,EAAE,GARC;AASRM,IAAAA,QAAQ,EAAE;AATF;AAVqB,CAAlB,CAAf","sourcesContent":["import React, { Component, useState, useEffect, useRef, Animated } from \"react\";\nimport { Text, View, StyleSheet, Dimensions, Button } from \"react-native\";\nimport PropType from \"prop-types\";\nimport { Circle, Line, Svg } from \"react-native-svg\";\nimport BarMarkers from \"./BarMarkers\";\n\nexport default class ProgressBar extends Component {\n  state = {\n    step: 50,\n    steps: 100,\n    animationValue: 0,\n    viewState: true,\n  };\n\n  //   toggleAnimation = () => {\n  //     if (this.state.viewState == true) {\n  //       Animated.timing(this.state.animationValue, {\n  //         toValue: this.state.animationValue + 20,\n  //         timing: 1000,\n  //       }).start(() => {\n  //         this.setState({ viewState: false });\n  //       });\n  //       this.setState({ animationValue: animationValue + 20 });\n  //     } else {\n  //       Animated.timing(this.state.animationValue, {\n  //         toValue: this.state.animationValue,\n  //         timing: 0,\n  //       }).start(this.setState({ viewState: true }));\n  //     }\n  //   };\n\n  //   static propType = {\n  //     step: PropType.number.isRequired,\n  //   };\n\n  handleIncrease = () => {\n    this.setState({ step: this.state.step + 10 });\n  };\n\n  render() {\n    // const animatedStyle = {\n    //   width: this.state.animationValue,\n    // };\n    // const windowWidth = Dimensions.get(\"window\");\n    // const widthUnit = Dimensions.get(\"window\") / 72;\n\n    const { step } = this.state;\n    console.log(step);\n    console.log(styles.progress);\n    return (\n      <View marginTop={120}>\n        <Text style={{ textAlign: \"center\" }}>Progress...</Text>\n        <View style={styles.progressContainer}>\n          <View style={styles.progress} width={`${step}%`}></View>\n        </View>\n        <Button\n          title=\"Increment Progress\"\n          onPress={this.handleIncrease}\n        ></Button>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  progressContainer: {\n    marginVertical: 20,\n    borderWidth: 0.5,\n    height: 20,\n    borderRadius: 20,\n    overflow: \"hidden\",\n    width: \"100%\",\n    backgroundColor: \"grey\",\n  },\n  progress: {\n    backgroundColor: \"red\",\n    height: 20,\n    borderRadius: 20,\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    bottom: \"0\",\n    width: \"0\",\n    maxWidth: \"100%\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}