{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/ProgressBar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState, useEffect, useRef, Animated } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport PropType from \"prop-types\";\nimport { Circle, Line, Svg } from \"react-native-svg\";\nimport BarMarkers from \"./BarMarkers\";\n\nvar ProgressBar = function (_Component) {\n  _inherits(ProgressBar, _Component);\n\n  var _super = _createSuper(ProgressBar);\n\n  function ProgressBar() {\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      step: 0,\n      steps: 100,\n      animationValue: 0,\n      trans: 0\n    };\n\n    _this.handleIncrease = function () {\n      var windowWidth = Dimensions.get(\"window\");\n      var widthUnit = windowWidth.width / 8;\n      LayoutAnimation.configureNext(LayoutAnimation.Presets.linear);\n\n      _this.setState({\n        step: _this.state.step + widthUnit\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"render\",\n    value: function render() {\n      var windowWidth = Dimensions.get(\"window\");\n      var step = this.state.step;\n      console.log(step);\n      console.log(styles.progress);\n      return React.createElement(View, {\n        marginTop: 120,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, \"Progress...\"), React.createElement(View, {\n        style: styles.progressContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        maxWidth: windowWidth.width,\n        style: styles.progress,\n        width: step,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }), React.createElement(BarMarkers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      })), React.createElement(Button, {\n        title: \"Increment Progress\",\n        onPress: this.handleIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ProgressBar;\n}(Component);\n\nexport { ProgressBar as default };\nvar styles = StyleSheet.create({\n  progressContainer: {\n    marginVertical: 20,\n    borderWidth: 0.5,\n    height: 20,\n    borderRadius: 20,\n    overflow: \"hidden\",\n    width: \"100%\",\n    backgroundColor: \"#E6E6FA\"\n  },\n  progress: {\n    backgroundColor: \"green\",\n    height: 20,\n    borderRadius: 20,\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    bottom: \"0\"\n  }\n});","map":{"version":3,"sources":["/Users/alexarmero/Desktop/TERM 2 /Team-Rocket-Large-Group-Project/src/components/ProgressBar.js"],"names":["React","Component","useState","useEffect","useRef","Animated","PropType","Circle","Line","Svg","BarMarkers","ProgressBar","state","step","steps","animationValue","trans","handleIncrease","windowWidth","Dimensions","get","widthUnit","width","LayoutAnimation","configureNext","Presets","linear","setState","console","log","styles","progress","textAlign","progressContainer","StyleSheet","create","marginVertical","borderWidth","height","borderRadius","overflow","backgroundColor","position","left","top","bottom"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,QAAwE,OAAxE;;;;;;;AASA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,QAAkC,kBAAlC;AACA,OAAOC,UAAP;;IAEqBC,W;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,KAAK,EAAE,GAFD;AAGNC,MAAAA,cAAc,EAAE,CAHV;AAINC,MAAAA,KAAK,EAAE;AAJD,K;;UAORC,c,GAAiB,YAAM;AACrB,UAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAApB;AACA,UAAMC,SAAS,GAAGH,WAAW,CAACI,KAAZ,GAAoB,CAAtC;AACAC,MAAAA,eAAe,CAACC,aAAhB,CAA8BD,eAAe,CAACE,OAAhB,CAAwBC,MAAtD;;AACA,YAAKC,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IAAX,GAAkBQ;AAA1B,OAAd;AACD,K;;;;;;;WAsBD,kBAAS;AACP,UAAMH,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAApB;AADO,UAECP,IAFD,GAEU,KAAKD,KAFf,CAECC,IAFD;AAGPe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,QAAnB;AACA,aACE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAE,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,QAAQ,EAAEf,WAAW,CAACI,KADxB;AAEE,QAAA,KAAK,EAAEQ,MAAM,CAACC,QAFhB;AAGE,QAAA,KAAK,EAAElB,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CAFF,EAUE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAC,oBADR;AAEE,QAAA,OAAO,EAAE,KAAKI,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVF,CADF;AAiBD;;;;EAzDsChB,S;;SAApBU,W;AA4DrB,IAAMmB,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,iBAAiB,EAAE;AACjBG,IAAAA,cAAc,EAAE,EADC;AAEjBC,IAAAA,WAAW,EAAE,GAFI;AAGjBC,IAAAA,MAAM,EAAE,EAHS;AAIjBC,IAAAA,YAAY,EAAE,EAJG;AAKjBC,IAAAA,QAAQ,EAAE,QALO;AAMjBlB,IAAAA,KAAK,EAAE,MANU;AAOjBmB,IAAAA,eAAe,EAAE;AAPA,GADY;AAU/BV,EAAAA,QAAQ,EAAE;AACRU,IAAAA,eAAe,EAAE,OADT;AAERH,IAAAA,MAAM,EAAE,EAFA;AAGRC,IAAAA,YAAY,EAAE,EAHN;AAIRG,IAAAA,QAAQ,EAAE,UAJF;AAKRC,IAAAA,IAAI,EAAE,GALE;AAMRC,IAAAA,GAAG,EAAE,GANG;AAORC,IAAAA,MAAM,EAAE;AAPA;AAVqB,CAAlB,CAAf","sourcesContent":["import React, { Component, useState, useEffect, useRef, Animated } from \"react\";\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Dimensions,\n  Button,\n  LayoutAnimation,\n} from \"react-native\";\nimport PropType from \"prop-types\";\nimport { Circle, Line, Svg } from \"react-native-svg\";\nimport BarMarkers from \"./BarMarkers\";\n\nexport default class ProgressBar extends Component {\n  state = {\n    step: 0,\n    steps: 100,\n    animationValue: 0,\n    trans: 0,\n  };\n\n  handleIncrease = () => {\n    const windowWidth = Dimensions.get(\"window\");\n    const widthUnit = windowWidth.width / 8;\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.linear);\n    this.setState({ step: this.state.step + widthUnit });\n  };\n\n  // handleIncrease = () => {\n  //   const windowWidth = Dimensions.get(\"window\");\n  //   const widthUnit = windowWidth.width / 8;\n  //   this.setState({ step: this.state.step + widthUnit });\n  // };\n\n  // componentDidUpdate(prevState) {\n  //   if (prevState.step !== this.state.step) {\n  //     LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n  //     this.setState({ step: this.state.step + widthUnit });\n  //   }\n  // }\n\n  render() {\n    return (\n      <Button label={this.state.loading ? \"\" : \"Submit\"}>\n        {this.state.loading && <Loader />}\n      </Button>\n    );\n  }\n  render() {\n    const windowWidth = Dimensions.get(\"window\");\n    const { step } = this.state;\n    console.log(step);\n    console.log(styles.progress);\n    return (\n      <View marginTop={120}>\n        <Text style={{ textAlign: \"center\" }}>Progress...</Text>\n        <View style={styles.progressContainer}>\n          <View\n            maxWidth={windowWidth.width}\n            style={styles.progress}\n            width={step}\n          ></View>\n          <BarMarkers></BarMarkers>\n        </View>\n        <Button\n          title=\"Increment Progress\"\n          onPress={this.handleIncrease}\n        ></Button>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  progressContainer: {\n    marginVertical: 20,\n    borderWidth: 0.5,\n    height: 20,\n    borderRadius: 20,\n    overflow: \"hidden\",\n    width: \"100%\",\n    backgroundColor: \"#E6E6FA\",\n  },\n  progress: {\n    backgroundColor: \"green\",\n    height: 20,\n    borderRadius: 20,\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    bottom: \"0\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}